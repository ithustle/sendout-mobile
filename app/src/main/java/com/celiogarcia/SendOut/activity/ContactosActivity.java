package com.celiogarcia.SendOut.activity;import android.Manifest;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.content.res.Configuration;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Bundle;import android.support.v4.app.ActivityCompat;import android.support.v4.content.ContextCompat;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.ActionBarDrawerToggle;import android.support.v7.app.AppCompatActivity;import android.text.Editable;import android.text.TextWatcher;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.widget.AdapterView;import android.widget.Button;import android.widget.EditText;import android.widget.ListView;import android.widget.Toast;import com.celiogarcia.SendOut.R;import com.celiogarcia.SendOut.adapter.ContactosAdapter;import com.celiogarcia.SendOut.adapter.MenuLateralAdapter;import com.celiogarcia.SendOut.dao.ContactoDao;import com.celiogarcia.SendOut.dao.SetupDataBase;import com.celiogarcia.SendOut.modelo.Agenda;import com.celiogarcia.SendOut.modelo.Configuracao;import com.celiogarcia.SendOut.modelo.Contacto;import com.celiogarcia.SendOut.modelo.Menus;import com.celiogarcia.SendOut.modelo.UserDevice;import com.celiogarcia.SendOut.task.ActualizaInfo;import java.util.List;import static com.celiogarcia.SendOut.activity.ChamadaActivity.STUCK_CALL;import static com.celiogarcia.SendOut.modelo.UserDevice.APP_VERSAO_CODIGO;import static com.celiogarcia.SendOut.receiver.ConnectivityReceiver.HAS_CONNECTION;import static com.celiogarcia.SendOut.receiver.ConnectivityReceiver.isDADOS;public class ContactosActivity extends AppCompatActivity {    private boolean searchOpen = false;    private ListView listaDeContactos;    private EditText editText;    private ContactosAdapter adapter;    private ContactoDao dao;    private ProgressDialog progress;    private List<Agenda> agendas;    private Context context;    private MenuLateralAdapter mAdapter;    private ListView navList;    private ListView navPerfil;    private ActionBarDrawerToggle mDrawerToggle;    private DrawerLayout mDrawerLayout;    private String mActivityTitle;    private Configuracao configuracao;    public static SetupDataBase sdb;    private ConnectivityManager connectivityManager;    private NetworkInfo networkInfo;    private Contacto contacto;    private UserDevice device;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_contactos);        context = this;        /* MENU LATERAL */        navList = (ListView) findViewById(R.id.navList);        navPerfil = (ListView) findViewById(R.id.navPerfil);        mDrawerLayout = (DrawerLayout)findViewById(R.id.drawer_layout);        mActivityTitle = getTitle().toString();        configuracao = new Configuracao(this);        contacto = new Contacto();        contacto.setNumeroDeTelefone(configuracao.pegaNumeroDoRemetente());        device = new UserDevice(this);        sdb = new SetupDataBase(context);        addDrawerItems();        setupDrawer();        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        getSupportActionBar().setHomeButtonEnabled(true);        /* MMENU LATERAL LISTA */        dao = new ContactoDao(context, sdb);        listaDeContactos = (ListView) findViewById(R.id.lista_contactos);        agendas = dao.mostraContactos();        adapter = new ContactosAdapter(context, agendas);        permissoesParaLerContactos();        permissoesParaAcederAInternet();        permissoesParaArmazenarNoTelefone();        if (!requestLocationPermition()){            permissaoParaLocazacaoCoarse();        }        Button enviarNovaMensagem = (Button) findViewById(R.id.nova_mensagem);        enviarNovaMensagem.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (configuracao.isPessoal()){                    Intent intent;                    if (configuracao.hasCallerIdRegistered() || configuracao.isSharedNumber()) {                        intent = new Intent(context, ChamadaActivity.class);                    }else{                        intent = new Intent(context, EscolheRegistoActivity.class);                    }                    startActivity(intent);                }else{                    Toast.makeText(context, getString(R.string.toast_chamada_indisponivel), Toast.LENGTH_LONG).show();                }            }        });        listaDeContactos.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {                Agenda agenda = (Agenda) listaDeContactos.getItemAtPosition(i);                Intent intentEnviarSms = new Intent(context, SmsContactoActivity.class);                intentEnviarSms.putExtra("contacto", agenda);                startActivity(intentEnviarSms);            }        });        listaDeContactos.setAdapter(adapter);        editText = (EditText) findViewById(R.id.procura_contactos);        editText.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {                if (count < before){                    adapter.resetData();                }                adapter.getFilter().filter(s.toString());            }            @Override            public void afterTextChanged(Editable s) {            }        });        verificaOTipoDeRede();        if (!configuracao.getInfoActualizada() || (Integer.parseInt(configuracao.getVersaoApp()) != APP_VERSAO_CODIGO)){            new ActualizaInfo(contacto, configuracao, device).execute();        }    }    @Override    protected void onResume() {        super.onResume();        perfilAdapter();    }    private void addDrawerItems() {        //Adapter de perfil        Menus menu_lateral = new Menus();        mAdapter = new MenuLateralAdapter(this, menu_lateral.getMenus());        navList.setAdapter(mAdapter);        perfilAdapter();        navList.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                switch (position){                    case 0:                        startActivity(new Intent(context, EnviarSmsActivity.class));                        mDrawerLayout.closeDrawers();                        break;                    case 1:                        if (configuracao.isPessoal()){                            Toast.makeText(context, getString(R.string.toast_campanha_aviso), Toast.LENGTH_LONG).show();                        }else{                            startActivity(new Intent(context, CampanhasActivity.class));                            mDrawerLayout.closeDrawers();                        }                        break;                    case 2:                        startActivity(new Intent(context, HistoricoActivity.class));                        mDrawerLayout.closeDrawers();                        break;                    case 3:                        startActivity(new Intent(context, ComprarCreditoActivity.class));                        mDrawerLayout.closeDrawers();                        break;                    case 4:                        startActivity(new Intent(context, ComprarVoz.class));                        mDrawerLayout.closeDrawers();                        break;                    case 5:                        startActivity(new Intent(context, SettingsActivity.class));                        mDrawerLayout.closeDrawers();                        break;                }            }        });    }    private void setupDrawer() {        mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout, R.string.drawer_open, R.string.drawer_close) {            /** Called when a drawer has settled in a completely open state. */            public void onDrawerOpened(View drawerView) {                super.onDrawerOpened(drawerView);                //getSupportActionBar().setTitle("Navigation!");                invalidateOptionsMenu(); // creates call to onPrepareOptionsMenu()            }            /** Called when a drawer has settled in a completely closed state. */            public void onDrawerClosed(View view) {                super.onDrawerClosed(view);                getSupportActionBar().setTitle(mActivityTitle);                invalidateOptionsMenu(); // creates call to onPrepareOptionsMenu()            }        };        mDrawerToggle.setDrawerIndicatorEnabled(true);        mDrawerLayout.addDrawerListener(mDrawerToggle);    }    @Override    public void onBackPressed() {        super.onBackPressed();        if (searchOpen){            editText.setVisibility(View.GONE);            adapter.resetData();            searchOpen = false;            return;        }        mDrawerLayout.closeDrawers();        System.exit(0);    }    @Override    protected void onPostCreate(Bundle savedInstanceState) {        super.onPostCreate(savedInstanceState);        mDrawerToggle.syncState();    }    @Override    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        mDrawerToggle.onConfigurationChanged(newConfig);    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        MenuInflater inflater = getMenuInflater();        inflater.inflate(R.menu.lista_de_contactos, menu);        return super.onCreateOptionsMenu(menu);    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()){            case R.id.menu_procura_contactos:                searchOpen = true;                editText.setVisibility(View.VISIBLE);                editText.setFocusable(true);                break;            case R.id.menu_actualiza_contactos:                progress = new ProgressDialog(this);                progress.setMessage(context.getString(R.string.dialogo_actualizar_contactos));                progress.setIndeterminate(true);                progress.show();                Thread t = new Thread(new Runnable() {                    @Override                    public void run() {                        dao.onActualizaContactos();                        runOnUiThread(new Runnable() {                            public void run() {                                agendas = dao.mostraContactos();                                adapter = new ContactosAdapter(context, agendas);                                listaDeContactos.setAdapter(adapter);                                progress.dismiss();                            }                        });                    }                });                t.start();                break;        }        if (mDrawerToggle.onOptionsItemSelected(item)) {            return true;        }        return super.onOptionsItemSelected(item);    }    public void carrega(){        progress = new ProgressDialog(context);        progress.setMessage(context.getString(R.string.dialogo_carregar_contactos));        progress.setIndeterminate(true);        progress.show();        Thread t = new Thread(new Runnable() {            @Override            public void run() {                dao.grava();                runOnUiThread(new Runnable() {                    public void run() {                        agendas = dao.mostraContactos();                        adapter = new ContactosAdapter(context, agendas);                        listaDeContactos.setAdapter(adapter);                        progress.dismiss();                    }                });            }        });        t.start();    }    @Override    public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {        switch (requestCode) {            case 1:                if ((grantResults.length > 0) && (grantResults[0] == PackageManager.PERMISSION_GRANTED)) {                    carrega();                }else{                    Toast.makeText(this, getString(R.string.toast_pemissao), Toast.LENGTH_LONG).show();                }                break;            case 2:                if ((grantResults.length > 0) && (grantResults[0] != PackageManager.PERMISSION_GRANTED)) {                    Toast.makeText(this, getString(R.string.toast_pemissao), Toast.LENGTH_LONG).show();                }                break;            case 3:                if ((grantResults.length > 0) && (grantResults[0] != PackageManager.PERMISSION_GRANTED)) {                    Toast.makeText(this, getString(R.string.toast_pemissao), Toast.LENGTH_LONG).show();                }                break;            case 4:                if ((grantResults.length > 0) && (grantResults[0] != PackageManager.PERMISSION_GRANTED)) {                    Toast.makeText(this, getString(R.string.toast_permition_location), Toast.LENGTH_LONG).show();                }            default:                break;        }    }    private boolean requestLocationPermition() {        int location = ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION);        if (location == PackageManager.PERMISSION_GRANTED) {            return true;        }        return false;    }    private void permissaoParaLocazacaoCoarse(){        int location = ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION);        if (location != PackageManager.PERMISSION_GRANTED) {            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 4);            STUCK_CALL = false;        }    }    public void permissoesParaLerContactos(){        int permissionCheck = ContextCompat.checkSelfPermission(this, Manifest.permission.READ_CONTACTS);        if (permissionCheck != PackageManager.PERMISSION_GRANTED) {            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_CONTACTS}, 1);        } else {            if (!dao.temContactos()){                carrega();            }        }    }    public void permissoesParaAcederAInternet(){        int permissionCheck = ContextCompat.checkSelfPermission(this, Manifest.permission.INTERNET);        if (permissionCheck != PackageManager.PERMISSION_GRANTED) {            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.INTERNET}, 2);        }    }    public void permissoesParaArmazenarNoTelefone(){        int permissionCheck = ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE);        if (permissionCheck != PackageManager.PERMISSION_GRANTED) {            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 3);        }    }    private void perfilAdapter(){        MenuLateralAdapter.MenuLateralPerfilAdapter mPerfil = mAdapter.new MenuLateralPerfilAdapter(configuracao);        navPerfil.setAdapter(mPerfil);        navPerfil.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {                startActivity(new Intent(context, SettingsActivity.class));                mDrawerLayout.closeDrawers();            }        });    }    private void verificaOTipoDeRede(){        connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);        if (connectivityManager != null) {            networkInfo = connectivityManager.getActiveNetworkInfo();            if (networkInfo != null) {                HAS_CONNECTION = true;                if (networkInfo.getType() != ConnectivityManager.TYPE_WIFI) {                    isDADOS = true;                }else{                    isDADOS = false;                }            }else{                isDADOS = false;            }        }        return;    }}